from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramAPIError

import app.models.stars as stars_models
from app.models.users import UserORM
import app.keyboards.stars as star_kb
import app.keyboards.admins as admin_kb
from app.middlewares.users import UserMiddleware
import app.states.stars as stars_states
from decimal import Decimal
import app.requests.stars as star_db
from config import CHAT_FOR_WITHDRAWAL_ID


star = Router()
star.message.middleware(UserMiddleware())
star.callback_query.middleware(UserMiddleware())


"""
–í–´–í–û–î –ó–í–Å–ó–î
"""
@star.callback_query(F.data == 'back_to_withdrawal_stars')
@star.callback_query(F.data == 'withdrawal_stars')
async def withdrawal_stars(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.answer('')
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞',
                                     reply_markup=await star_kb.withdrawal_options_kb())


@star.callback_query(F.data.startswith('withdrawal-option_'))
async def withdrawal_stars_sure(callback: CallbackQuery, user_info: UserORM, state: FSMContext,):
    amount = callback.data.split('_')[1]
    await state.update_data(withdrawal_amount=amount)
    if user_info.balance < Decimal(amount):
        await callback.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ')
    else:
        await callback.message.edit_text(f'–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ {amount} –∑–≤—ë–∑–¥?',
                                         reply_markup=star_kb.sure_withdrawal_kb)


@star.callback_query(F.data == 'enter_withdrawal_option')
async def enter_withdrawal_option(callback: CallbackQuery, state: FSMContext,):
    await callback.answer('')
    msg = await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞',
                                     reply_markup=star_kb.withdrawal_stars_cancel_kb)
    await state.set_state(stars_states.WithdrawalStarState.enter_amount)
    await state.update_data(bot_msg_id=msg.message_id)


@star.message(stars_states.WithdrawalStarState.enter_amount)
async def enter_withdrawal_option_sure(message: Message, user_info: UserORM, state: FSMContext):
    data = await state.get_data()
    bot_msg_id = data.get("bot_msg_id")
    if bot_msg_id:
        try:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=bot_msg_id)
        except:
            pass
    try:
        amount = int(message.text)
        if amount < 500:
            raise ValueError
    except ValueError:
        msg = await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞',
                             reply_markup=star_kb.withdrawal_stars_cancel_kb
                             )
        await state.update_data(bot_msg_id=msg.message_id)
        return
    if user_info.balance < amount:
        msg = await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ\n'
                             '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞',
                             reply_markup=star_kb.withdrawal_stars_cancel_kb
                             )
        await state.update_data(bot_msg_id=msg.message_id)
        return
    await state.update_data(withdrawal_amount=amount)
    await message.answer(f'–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ {amount} –∑–≤—ë–∑–¥?',
                                     reply_markup=star_kb.sure_withdrawal_kb)


@star.callback_query(F.data == 'withdrawal_yes')
async def withdrawal_yes(callback: CallbackQuery, user_info: UserORM, bot: Bot, state: FSMContext,):
    await callback.answer('')
    data = await state.get_data()
    amount = data.get("withdrawal_amount")
    new_balance = user_info.balance - int(amount)
    withdrawal_id = await star_db.withdrawal_stars(user_info.id, new_balance, amount)
    await bot.send_message(chat_id=CHAT_FOR_WITHDRAWAL_ID,
                           text=f'‚ÄºÔ∏è –í–ù–ò–ú–ê–ù–ò–ï ‚ÄºÔ∏è\n'
                                f'<b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥:</b>\n\n'
                                f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {callback.from_user.username}\n'
                                f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥:</b> {amount}üåü',
                           reply_markup=await admin_kb.withdrawal_moderation(withdrawal_id))
    await callback.message.edit_text('–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
                                     reply_markup=star_kb.back_to_profile_kb)
    await state.clear()


"""
–ü–û–ö–£–ü–ö–ê –ó–í–Å–ó–î
"""
@star.callback_query(F.data == 'back_to_select_user_stars')
@star.callback_query(F.data == 'buy_stars')
async def buy_stars(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    await state.clear()
    text = await star_db.get_buy_star_text()
    text = text.replace("\\n", "\n")
    await callback.message.edit_text(text,
                                     disable_web_page_preview=True,
                                     reply_markup=await star_kb.buy_stars_select_user_kb(callback.from_user.username))
    # await callback.message.edit_text(text,
    #                                  disable_web_page_preview=True,
    #                                  reply_markup=await star_kb.buy_options_kb())


@star.callback_query(F.data.startswith('send-stars-to-user@'))
async def buy_stars_select_option(callback: CallbackQuery, user_info: UserORM, state: FSMContext,):
    username = callback.data.split('@')[1]
    await state.update_data(username=username)
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥',
                                     reply_markup=await star_kb.buy_options_kb())
    # amount_money = callback.data.split('@')[2]
    # await callback.message.edit_text(f'–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –¥–ª—è {amount_money} —Ä—É–±–ª–µ–π? (–¥–ª—è @{username})',
    #                                      reply_markup=await star_kb.buy_stars_select_method_kb())


@star.callback_query(F.data == 'send_stars_to_another_user')
async def send_stars_to_another_user(callback: CallbackQuery, state: FSMContext,):
    await callback.answer('')
    msg = await callback.message.edit_text('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (username) –≤ —á–∞—Ç',
                                     reply_markup=star_kb.back_to_buy_stars_select_user_kb)
    await state.set_state(stars_states.BuyStarSelectUserState.enter_username)
    await state.update_data(bot_msg_id=msg.message_id)


@star.message(stars_states.BuyStarSelectUserState.enter_username)
async def buy_stars_another_user_select_option(message: Message, bot: Bot, state: FSMContext):
    data = await state.get_data()
    await state.set_state(stars_states.BuyStarSelectUserState.smth)
    bot_msg_id = data.get("bot_msg_id")
    # amount_money = data.get("amount_money")
    # number_of_stars = data.get("buy_amount_stars")
    if bot_msg_id:
        try:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=bot_msg_id)
        except:
            pass
    username = message.text
    if username.startswith('@'):
        username = username[1:]
    await state.update_data(username=username)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥',
                                     reply_markup=await star_kb.buy_options_kb())

    # await message.answer(f'–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∫—É–ø–∏—Ç—å {number_of_stars} Telegram Stars üåü –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç '
    #                      f'@{username} –∑–∞ {amount_money}‚ÇΩ.',
    #                      reply_markup=await star_kb.buy_stars_select_user_kb(amount_money, username))


@star.callback_query(F.data.startswith('buy-option_'))
async def buy_stars_select_method(callback: CallbackQuery, state: FSMContext):
    number_of_stars = int(callback.data.split('_')[1])
    await state.update_data(buy_number_of_stars=number_of_stars)
    star_cost = await star_db.get_star_cost()
    amount = number_of_stars * star_cost.amount
    await state.update_data(amount_money=amount)
    data = await state.get_data()
    username = data.get("username")
    await callback.message.edit_text( f'–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∫—É–ø–∏—Ç—å {number_of_stars} Telegram Stars üåü –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç '
                                     f'@{username} –∑–∞ {amount}‚ÇΩ.\n\n'
                                      f'–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã',
                                         reply_markup=await star_kb.buy_stars_select_method_kb())
    # await callback.message.edit_text(f'–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∫—É–ø–∏—Ç—å {number_of_stars} Telegram Stars üåü –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç '
    #                                  f'@{callback.from_user.username} –∑–∞ {amount}‚ÇΩ.',
    #                                  reply_markup=await star_kb.buy_stars_select_user_kb(amount, callback.from_user.username))


@star.callback_query(F.data == 'enter_buy_option')
async def enter_buy_option(callback: CallbackQuery, state: FSMContext,):
    await callback.answer('')
    msg = await callback.message.edit_text('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç —Ç—Ä–µ–±—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ó–≤—ë–∑–¥ üåü',
                                     reply_markup=star_kb.buy_stars_cancel_kb)
    await state.set_state(stars_states.BuyStarState.enter_amount)
    await state.update_data(bot_msg_id=msg.message_id)


@star.message(stars_states.BuyStarState.enter_amount)
async def enter_buy_option_select_method(message: Message, user_info: UserORM, state: FSMContext):
    data = await state.get_data()
    bot_msg_id = data.get("bot_msg_id")
    if bot_msg_id:
        try:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=bot_msg_id)
        except:
            pass
    try:
        number_of_stars = int(message.text)
        if number_of_stars < 50 or number_of_stars > 50000:
            raise ValueError
    except ValueError:
        msg = await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –Ω–µ –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ—â—ë —Ä–∞–∑.',
                             reply_markup=star_kb.buy_stars_cancel_kb
                             )
        await state.update_data(bot_msg_id=msg.message_id)
        return
    await state.update_data(buy_number_of_stars=number_of_stars)
    star_cost = await star_db.get_star_cost()
    amount = number_of_stars * star_cost.amount
    await state.update_data(amount_money=amount)
    await state.set_state(stars_states.BuyStarState.smth)
    username = data.get("username")
    await message.answer(f'–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∫—É–ø–∏—Ç—å {number_of_stars} Telegram Stars üåü –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç '
                                     f'@{username} –∑–∞ {amount}‚ÇΩ.\n\n'
                                     f'–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã',
                                     reply_markup=await star_kb.buy_stars_select_method_kb())


@star.callback_query(F.data == 'how_it_works')
async def how_it_works(callback: CallbackQuery):
    await callback.answer('')
    text = await star_db.get_how_it_works_text()
    text = text.replace("\\n", "\n")
    await callback.message.edit_text(text,
                                     disable_web_page_preview=True,
                                     reply_markup=star_kb.back_to_buy_stars_kb)